# ------------------------------------------------------------------
# .bashrc
#
# The individual per-interactive-shell startup file
#
# ------------------------------------------------------------------
#
# =============================================================== #
#
#  ALIASES AND FUNCTIONS
#
#  Arguably, some functions defined here are quite big.
#  If you want to make this file smaller, these functions can
#  be converted into scripts and removed from here.
#
# =============================================================== #

# Determine the operating system and use to set or source things
myos=`uname -s`
# Settings based on operating system
case "$myos" in
Darwin)
colorflag="-G"
OPENWINHOME="/usr/X11"
PATHPOSTPEND=""
;;
Linux)
colorflag="--color"
OPENWINHOME="/usr/X11R6"
PATHPOSTPEND=""
;;
*)
colorflag=""
OPENWINHOME="/usr/X11"
PATHPOSTPEND=""
esac

# interactive option 
alias rm='rm -i'
alias rmf='rm -rf'
alias cp='cp -i'
alias mv='mv -i'

# a quick way to get out of current directory 
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'


# Colorize the ls output
alias ls="command ls ${colorflag}"	

# Use a long listing format
alias ll='ls -la'	   				

# Show all files
alias la="ls -aF"      				

#-------------------------------------------------------------
# Spelling typos - highly personnal and keyboard-dependent:
#-------------------------------------------------------------

# get rid of command not found 
alias cd..='cd ..'
alias xs='cd'
alias vf='cd'
alias kk='ll'

#-------------------------------------------------------------
# Configure how history works:
#-------------------------------------------------------------

# configure how history works
HISTCONTROL=ignoredups # ignore the line if it matches previous line
HISTFILESIZE=20000 # size of the history file cf. also shopt -s histappend
HISTSIZE=1000 # size of the run-time history list
HISTIGNORE=ls:ll:la:l:cd:pwd:exit:mc:su:df:clear # do not put these in history file

# export settings
export HISTCONTROL HISTFILESIZE HISTSIZE HISTIGNORE 

#-------------------------------------------------------------
# File & strings functions:
#-------------------------------------------------------------

# Finds a file with a pattern in name:
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }

# Handy Extract Program
function extract()      
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

#-------------------------------------------------------------
# Prompt functions:
#-------------------------------------------------------------

function prompt {
  local BLACK="\[\033[0;30m\]"
  local BLACKBOLD="\[\033[1;30m\]"
  local RED="\[\033[0;31m\]"
  local REDBOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREENBOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOWBOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUEBOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLEBOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYANBOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITEBOLD="\[\033[1;37m\]"
  local RESETCOLOR="\[\e[00m\]"
 

#function to parse git branch 
function new_parse_git_branch() {
    br=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [ "$br" == "(no branch)" ]; then
        echo "(git:tag:`git describe`)"
    else
        echo "git:$br"
    fi
}

#Commit Awareness
function git-status {
    st=$(git status 2>/dev/null | tail -n 1)
    if [[ $st != "nothing to commit, working directory clean" ]]; then
        echo "dirty"
    else
        echo "clean"
    fi
}


function git_prompt {
    status=$(git status 2>/dev/null | tail -n 1)
    if [[ $status == "" ]]
    then
        echo ""
    else
        echo "($(new_parse_git_branch):$(git-status))"
    fi
}


#Virtualenv display
function virtualenv_info(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv="${VIRTUAL_ENV##*/}"
    else
        # In case you don't have one activated
        venv=''
    fi
    [[ -n "$venv" ]] && echo "($venv) "
}

#Disable default Virtualenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1

local venv="\$(virtualenv_info)"

export PS1="\n$RED\u $PURPLE@ $GREEN\w     \$(git_prompt)\[\033[00m\]\n \[\033[0;34m\]${venv} → $RESETCOLOR"
export PS2="| → $RESETCOLOR"
}

prompt