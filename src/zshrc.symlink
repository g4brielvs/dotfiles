#
# Executes commands at the start of an interactive session.
#
# Authors:
#   g4brielvs <github@g4brielvs.me>

# -------------------------------------------------------------------
# Antigen (https://github.com/zsh-users/antigen)
# -------------------------------------------------------------------

# If there is cache available
#if [[ -f ${HOME}/.antigen/.cache/.zcache-payload ]]; then
#    # Load bundles statically
#    source ${HOME}/.antigen/.cache/.zcache-payload
#
#    # You will need to call compinit
#    autoload -Uz compinit
#    compinit -d ${HOME}/.zcompdump
#else
#    # If there is no cache available do load and execute antigen
#    source /usr/local/share/antigen/antigen.zsh
#    antigen init ${HOME}/.antigenrc
#fi

#source /usr/local/share/antigen/antigen.zsh
#antigen init ${HOME}/.antigenrc
# -------------------------------------------------------------------
# GPG
# -------------------------------------------------------------------
# Set up GPG Agent for SSH keys & git commit signing
# https://gpgtools.org
#export GPG_TTY=$(tty)
#if [ -f "${HOME}/.gnupg/gpg-agent-info" ]; then
#  . "${HOME}/.gnupg/gpg-agent-info"
#  export GPG_AGENT_INFO
#  export SSH_AUTH_SOCK
#  export SSH_AGENT_PID
#fi

# Set up 1Password
# https://developer.1password.com/docs/ssh
if [ -d "${HOME}/.1password" ]; then
    export SSH_AUTH_SOCK="${HOME}/.1password/agent.sock"
fi
export SSH_AUTH_SOCK=$HOME/.1password/agent.sock

# -------------------------------------------------------------------
# Oh My Zsh (https://github.com/ohmyzsh/ohmyzsh)
# -------------------------------------------------------------------

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

plugins=(
  dotenv
  zsh-autosuggestions
  zsh-completions
  fast-syntax-highlighting
)
source $ZSH/oh-my-zsh.sh

# -------------------------------------------------------------------
# Homebrew
# -------------------------------------------------------------------

# Homebrew
# The missing package manager for macOS
# http://brew.sh
# /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
export HOMEBREW_CASK_OPTS="--appdir=$HOME/Applications --caskroom=/usr/local/Caskroom/"

#All commands have been installed with the prefix 'g'.
#
#If you really need to use these commands with their normal names, you
#can add a "gnubin" directory to your PATH from your bashrc like:
#
#    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
#
#Additionally, you can access their man pages with normal names if you add
#the "gnuman" directory to your MANPATH from your bashrc as well:
#
#    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
#

#GNU "make" has been installed as "gmake".
#If you need to use it as "make", you can add a "gnubin" directory
#to your PATH from your bashrc like:

#    PATH="/usr/local/opt/make/libexec/gnubin:$PATH"

# -------------------------------------------------------------------
# Python
# -------------------------------------------------------------------

# Anaconda3 (https://www.continuum.io/downloads)
#if [ -d /usr/local/anaconda3 ] ; then
#    export PATH="/usr/local/anaconda3/bin:$PATH"
#fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/usr/local/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
#    eval "$__conda_setup"
#else
#    if [ -f "/usr/local/anaconda3/etc/profile.d/conda.sh" ]; then
# . "/usr/local/anaconda3/etc/profile.d/conda.sh"  # commented out by conda initialize
#    else
#        export PATH="/usr/local/anaconda3/bin:$PATH"
#    fi
#fi
#unset __conda_setup
# <<< conda initialize <<

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE="/usr/local/bin/micromamba";
export MAMBA_ROOT_PREFIX="/Users/g4brielvs/.micromamba";
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    if [ -f "/Users/g4brielvs/.micromamba/etc/profile.d/micromamba.sh" ]; then
        . "/Users/g4brielvs/.micromamba/etc/profile.d/micromamba.sh"
    else
        export  PATH="/Users/g4brielvs/.micromamba/bin:$PATH"  # extra space after export prevents interference from conda init
    fi
fi
unset __mamba_setup
# <<< mamba initialize <<<

# pipenv (https://github.com/pypa/pipenv)
# automatically run "pipenv shell" if we enter a pipenv project subdirectory
# if opening a new terminal, preserve the source directory
#activate(){
#    activate_file=$(pipenv --venv)/bin/activate
#    if [ -e "$activate_file" ]; then
#        . $activate_file
#
#        # the pipenv shell normally enables these as well
#        export PYTHONDONTWRITEBYTECODE=1
#        export PIPENV_ACTIVE=1
#        export PIPENV_VENV_IN_PROJECT=false
#
#        if [ -f "${VIRTUAL_ENV}/.project" ]; then
#            cd $(cat "${VIRTUAL_ENV}/.project")
#        fi
#        return
#    fi
#}

# poetry (https://github.com/python-poetry/poetry)
#export POETRY_ROOT="$HOME/.poetry"
#export PATH="$POETRY_ROOT/bin:$PATH"
#export POETRY_VIRTUALENVS_PATH="$HOME/.local/share/virtualenvs/"

# pyenv (https://github.com/pyenv/pyenv)
if which pyenv > /dev/null; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --no-rehash - zsh )"
# pyenv-virtualenv
# https://github.com/pyenv/pyenv-virtualenv
# brew install pyenv-virtualenv
    export PYENV_VIRTUALENV_DISABLE_PROMPT=true
    export VIRTUAL_ENV_DISABLE_PROMPT=true
    eval "$(pyenv virtualenv-init - zsh)"
fi

# virtualenvwrapper
# https://virtualenvwrapper.readthedocs.io/en/latest/
#if [ -x /usr/local/bin/virtualenvwrapper.sh ] ; then
#    export WORKON_HOME=$HOME/.virtualenvs
#    source /usr/local/bin/virtualenvwrapper.sh
#fi
if which rbenv > /dev/null; then
    eval "$(rbenv init - zsh)"
    export PATH="$HOME/.rbenv/bin:$PATH"
fi

export PYENV_VIRTUALENV_DISABLE_PROMPT=1
export VIRTUAL_ENV_DISABLE_PROMPT=1

# -------------------------------------------------------------------
# Miscellanea
# -------------------------------------------------------------------

# 1Password
source "$HOME/.config/op/plugins.sh"

# Google
source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc

# Starship
eval "$(starship init zsh)"

# Spark
export SPARK_HOME="$(brew --prefix apache-spark)/libexec"
export PATH="$SPARK_HOME/bin/:$PATH"